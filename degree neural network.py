# -*- coding: utf-8 -*-
"""neural network

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nUivgprzdVCjd34Z4HCXcHV2M_XNcLEE
"""

import tensorflow as tf
import numpy as np

c = np.array([-40, -10, 0, 8, 15, 22, 38], dtype = float)
f = np.array([-40, 14, 32, 46.4, 59, 71.6, 100.4], dtype = float)

#cap = tf.keras.layers.Dense(units = 1, input_shape = [1])
#model = tf.keras.Sequential([cap])
ocult1 = tf.keras.layers.Dense(units = 3, input_shape = [1])
ocult2 = tf.keras.layers.Dense(units = 3)
ex = tf.keras.layers.Dense(units = 1)
model = tf.keras.Sequential([ocult1, ocult2, ex])

model.compile(
    optimizer = tf.keras.optimizers.Adam(0.1),
    loss = 'mean_squared_error'
)

print("Comenzando entrenamiento...")
his = model.fit(c, f, epochs = 1000, verbose = False)
print("Listo! el modelo esta entrenado")

import matplotlib.pyplot as plt
plt.xlabel("# Epoca")
plt.ylabel("Magnitud de perdida")
plt.plot(his.history["loss"])

print("Prediccion")
result = model.predict([754])
print("EL resultado es " + str(result) + "fahrenheit")

print("Variables internas del modelo")
#print(cap.get_weights())
print(ocult1.get_weights())
print(ocult2.get_weights())
print(ex.get_weights())
